{"version":3,"sources":["logo.svg","context.js","switch.js","Header.js","MainBody.js","reducer.js","theme.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","React","createContext","Container","styled","label","Slider","span","Input","input","Switch","dispatch","useContext","Context","type","onClick","Header","withStyles","theme","root","width","height","padding","margin","spacing","switchBase","transform","color","palette","common","white","backgroundColor","opacity","border","thumb","track","borderRadius","grey","transition","transitions","create","checked","focusVisible","classes","props","focusVisibleClassName","disableRipple","className","MainBody","useState","Map","setMap","id","src","href","target","class","Button","variant","reducer","state","action","isDark","light","text","background","dark","GlobalStyles","createGlobalStyle","App","useReducer","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fe1e1f8a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nexport default React.createContext(null);\r\n","import React, { useContext } from \"react\";\r\nimport Context from \"./context\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.label`\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 60px;\r\n  height: 34px;\r\n  margin-right: 15px;\r\n`;\r\n\r\nconst Slider = styled.span`\r\n  position: absolute;\r\n  top: 0;\r\n  display: block;\r\n  cursor: pointer;\r\n  width: 100%;\r\n  height: 100%;\r\n  background-color: #ccc;\r\n  border-radius: 34px;\r\n  -webkit-transition: 0.4s;\r\n  transition: 0.4s;\r\n\r\n  &::before {\r\n    position: absolute;\r\n    content: \"\";\r\n    height: 26px;\r\n    width: 26px;\r\n    margin: 4px;\r\n    background-color: white;\r\n    border-radius: 50%;\r\n    -webkit-transition: 0.4s;\r\n    transition: 0.4s;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  opacity: 0;\r\n  width: 0;\r\n  height: 0;\r\n  margin: 0;\r\n\r\n  &:checked + ${Slider} {\r\n    background-color: #2196f3;\r\n  }\r\n\r\n  &:checked + ${Slider}::before {\r\n    -webkit-transform: translateX(26px);\r\n    -ms-transform: translateX(26px);\r\n    transform: translateX(26px);\r\n  }\r\n\r\n  &:focus + ${Slider} {\r\n    box-shadow: 0 0 1px #2196f3;\r\n  }\r\n`;\r\n\r\nconst Switch = () => {\r\n  const { dispatch } = useContext(Context);\r\n\r\n  const handleOnClick = () => {\r\n    // Dispatch action\r\n    dispatch({ type: \"TOGGLE_DARK_MODE\" });\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Input type=\"checkbox\" onClick={handleOnClick} />\r\n      <Slider />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Switch;\r\n","import React, { useState } from 'react';\r\nimport { purple } from '@material-ui/core/colors';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Switch from './switch';\r\nimport './App.css';\r\n\r\nconst IOSSwitch = withStyles((theme) => ({\r\n    root: {\r\n        width: 42,\r\n        height: 26,\r\n        padding: 0,\r\n        margin: theme.spacing(1),\r\n    },\r\n    switchBase: {\r\n        padding: 1,\r\n        '&$checked': {\r\n            transform: 'translateX(16px)',\r\n            color: theme.palette.common.white,\r\n            '& + $track': {\r\n                backgroundColor: '#52d869',\r\n                opacity: 1,\r\n                border: 'none',\r\n            },\r\n        },\r\n        '&$focusVisible $thumb': {\r\n            color: '#52d869',\r\n            border: '6px solid #fff',\r\n        },\r\n    },\r\n    thumb: {\r\n        width: 24,\r\n        height: 24,\r\n    },\r\n    track: {\r\n        borderRadius: 26 / 2,\r\n        border: `1px solid ${theme.palette.grey[600]}`,\r\n        backgroundColor: theme.palette.grey[50],\r\n        opacity: 1,\r\n        transition: theme.transitions.create(['background-color', 'border']),\r\n    },\r\n    checked: {},\r\n    focusVisible: {},\r\n}))(({ classes, ...props }) => {\r\n    return (\r\n      <Switch\r\n        focusVisibleClassName={classes.focusVisible}\r\n        disableRipple\r\n        classes={{\r\n          root: classes.root,\r\n          switchBase: classes.switchBase,\r\n          thumb: classes.thumb,\r\n          track: classes.track,\r\n          checked: classes.checked,\r\n        }}\r\n        {...props}\r\n      />\r\n    );\r\n  });\r\n\r\nconst Header = props => {\r\n    return (\r\n        <div>\r\n            <div className=\"header\">\r\n                <Switch/>\r\n                 {/* <FormGroup>\r\n                 <FormControlLabel\r\n        control={<IOSSwitch  name=\"checkedB\" />}\r\n    \r\n      />\r\n      </FormGroup> */}                \r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\nexport default Header;","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport './MainBody.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport InstagramIcon from '@material-ui/icons/Instagram';\r\nimport TwitterIcon from '@material-ui/icons/Twitter';\r\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\r\nimport EmailIcon from '@material-ui/icons/Email';\r\nimport GitHubIcon from '@material-ui/icons/GitHub';\r\nimport PublicIcon from '@material-ui/icons/Public';\r\n\r\nconst MainBody = props => {\r\n    let [Map, setMap] = useState(false);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"body\">\r\n                <div className=\"body__headerContainer\">\r\n                    <div className=\"body__headerText\">\r\n                        <h1 className=\"body__title\"> Akhil Bhardwaj</h1>\r\n                        <h2 className=\"body__subtitle\">Software Engineer in Banglore</h2>\r\n                    </div>\r\n                    <div className=\"body__Img\">\r\n                        <img id=\"titleImg\" src=\"https://media.giphy.com/media/L8K62iTDkzGX6/giphy.gif\" />\r\n                    </div>\r\n                </div>\r\n                <div className=\"body__links\">\r\n                    <a className=\"icon\" href=\"https://www.linkedin.com/mwlite/in/akhil-bhardwaj-a44767144\" target=\"_blank\"><LinkedInIcon /></a>\r\n                    <a class=\"icon\" href=\"https://www.instagram.com/akhil_sharma7/\" target=\"_blank\"><InstagramIcon /></a>\r\n                    <a className=\"icon\" href=\"https://twitter.com/AbhiAkhil96?s=09\" target=\"_blank\"><TwitterIcon /></a>\r\n                    <a className=\"icon\" href=\"mailto: bhardwaj.akhil96@gmail.com\"><EmailIcon /></a>\r\n                    <a className=\"icon\" href=\"https://github.com/Reachakhil\" target=\"_blank\"><GitHubIcon /></a>\r\n                    <a className=\"icon\" onClick={() => setMap(!Map)} ><PublicIcon /></a>\r\n\r\n                </div>\r\n                <div className=\"body__Tabs\">\r\n                    <div><Button className=\"btn\" variant=\"outlined\" color=\"secondary\">\r\n                        About Me</Button></div>\r\n                    <div><Button className=\"btn\" variant=\"outlined\" color=\"secondary\">\r\n                    Portfolio</Button></div>\r\n                    <div><Button className=\"btn\" variant=\"outlined\" color=\"secondary\">\r\n                    Blog</Button></div>\r\n                </div>\r\n                <div className=\"body__SwitchDiv\">\r\n                Hi there! My name is Akhil and I'm a Software Engineer at AccionLabs. My primary skills include Web Development.\r\n                \r\n                </div>\r\n                {Map && <iframe src=\"https://www.google.com/maps/d/embed?mid=1k35Ia3iDr0SyJaMdv2N6c2_AUvw&hl=en\" width=\"640\" height=\"480\"></iframe>\r\n                }\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\n\r\n\r\nexport default MainBody;","const reducer = (state = {}, action) => {\r\n    switch (action.type) {\r\n      case \"TOGGLE_DARK_MODE\":\r\n        return {\r\n          isDark: !state.isDark\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export default reducer;\r\n  ","const black = \"#363537\";\r\nconst lightGrey = \"#ffff\";\r\nconst white = \"#FAFAFA\";\r\n\r\nexport const light = {\r\n  text: black,\r\n  background: lightGrey\r\n};\r\n\r\nexport const dark = {\r\n  text: white,\r\n  background: black\r\n};\r\n","import React, {useReducer} from 'react';\nimport { ThemeProvider, createGlobalStyle } from \"styled-components\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Header from './Header';\nimport MainBody from './MainBody';\nimport Context from \"./context\";\nimport reducer from \"./reducer\";\nimport { light, dark } from \"./theme\";\n\nexport const GlobalStyles = createGlobalStyle`\n  body, #root {\n    background: ${({ theme }) => theme.background};\n    color: ${({ theme }) => theme.text};\n    display: flex;\n    flex-direction: row;\n    justify-content: center;\n    align-items: center;\n  }\n`;\n\nfunction App() {\n  const [state, dispatch] = useReducer(reducer, {\n    isDark: false\n  });\n\n  return (\n    <Context.Provider value={{ state, dispatch }}>\n      <ThemeProvider theme={state.isDark ? dark : light}>\n      <GlobalStyles />\n    <div className=\"App\">\n   <Header/>\n   <MainBody/>\n    </div>\n    </ThemeProvider>\n    </Context.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}